[{"/Users/imform/Documents/Flow/src/index.tsx":"1","/Users/imform/Documents/Flow/src/App.tsx":"2","/Users/imform/Documents/Flow/src/store/index.ts":"3","/Users/imform/Documents/Flow/src/pages/index.ts":"4","/Users/imform/Documents/Flow/src/routes/index.ts":"5","/Users/imform/Documents/Flow/src/routes/const.ts":"6","/Users/imform/Documents/Flow/src/pages/content/index.tsx":"7","/Users/imform/Documents/Flow/src/pages/main/index.tsx":"8","/Users/imform/Documents/Flow/src/layouts/index.tsx":"9","/Users/imform/Documents/Flow/src/containers/index.tsx":"10","/Users/imform/Documents/Flow/src/containers/mainContainer/index.tsx":"11","/Users/imform/Documents/Flow/src/layouts/mainLayout/index.tsx":"12","/Users/imform/Documents/Flow/src/containers/contentContainer/index.tsx":"13","/Users/imform/Documents/Flow/src/modules/project/favoriteProject.ts":"14","/Users/imform/Documents/Flow/src/components/index.ts":"15","/Users/imform/Documents/Flow/src/components/sideNav/index.tsx":"16","/Users/imform/Documents/Flow/src/components/contentChart/index.tsx":"17","/Users/imform/Documents/Flow/src/components/contentTicket/index.tsx":"18","/Users/imform/Documents/Flow/src/components/mainBox/index.tsx":"19","/Users/imform/Documents/Flow/src/components/contentAside/index.tsx":"20","/Users/imform/Documents/Flow/src/components/contentWrite/index.tsx":"21","/Users/imform/Documents/Flow/src/store/store.ts":"22","/Users/imform/Documents/Flow/src/store/write.ts":"23","/Users/imform/Documents/Flow/src/store/menu.ts":"24","/Users/imform/Documents/Flow/src/store/project.ts":"25","/Users/imform/Documents/Flow/src/components/contentChart/utils.ts":"26"},{"size":341,"mtime":1610425859672,"results":"27","hashOfConfig":"28"},{"size":554,"mtime":1610350714825,"results":"29","hashOfConfig":"28"},{"size":76,"mtime":1610441789169,"results":"30","hashOfConfig":"28"},{"size":98,"mtime":1610332609161,"results":"31","hashOfConfig":"28"},{"size":460,"mtime":1610335222777,"results":"32","hashOfConfig":"28"},{"size":69,"mtime":1610323738886,"results":"33","hashOfConfig":"28"},{"size":243,"mtime":1610335222774,"results":"34","hashOfConfig":"28"},{"size":273,"mtime":1610332609163,"results":"35","hashOfConfig":"28"},{"size":54,"mtime":1610332609159,"results":"36","hashOfConfig":"28"},{"size":126,"mtime":1610332609155,"results":"37","hashOfConfig":"28"},{"size":900,"mtime":1610505719325,"results":"38","hashOfConfig":"28"},{"size":2946,"mtime":1610505719326,"results":"39","hashOfConfig":"28"},{"size":5543,"mtime":1610523403816,"results":"40","hashOfConfig":"28"},{"size":540,"mtime":1610412723450,"results":"41","hashOfConfig":"28"},{"size":151,"mtime":1610350714837,"results":"42","hashOfConfig":"28"},{"size":4266,"mtime":1610505719324,"results":"43","hashOfConfig":"28"},{"size":232,"mtime":1610505719320,"results":"44","hashOfConfig":"28"},{"size":7252,"mtime":1610523403779,"results":"45","hashOfConfig":"28"},{"size":4471,"mtime":1610505719318,"results":"46","hashOfConfig":"28"},{"size":3290,"mtime":1610505719320,"results":"47","hashOfConfig":"28"},{"size":5470,"mtime":1610523403791,"results":"48","hashOfConfig":"28"},{"size":310,"mtime":1610441789171,"results":"49","hashOfConfig":"28"},{"size":1365,"mtime":1610523403821,"results":"50","hashOfConfig":"28"},{"size":389,"mtime":1610441789170,"results":"51","hashOfConfig":"28"},{"size":2106,"mtime":1610505719327,"results":"52","hashOfConfig":"28"},{"size":3819,"mtime":1610505719321,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"142ibnu",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/imform/Documents/Flow/src/index.tsx",[],["110","111"],"/Users/imform/Documents/Flow/src/App.tsx",[],"/Users/imform/Documents/Flow/src/store/index.ts",[],"/Users/imform/Documents/Flow/src/pages/index.ts",[],"/Users/imform/Documents/Flow/src/routes/index.ts",[],"/Users/imform/Documents/Flow/src/routes/const.ts",[],"/Users/imform/Documents/Flow/src/pages/content/index.tsx",[],"/Users/imform/Documents/Flow/src/pages/main/index.tsx",[],"/Users/imform/Documents/Flow/src/layouts/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/mainContainer/index.tsx",[],"/Users/imform/Documents/Flow/src/layouts/mainLayout/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/contentContainer/index.tsx",[],"/Users/imform/Documents/Flow/src/modules/project/favoriteProject.ts",[],"/Users/imform/Documents/Flow/src/components/index.ts",[],"/Users/imform/Documents/Flow/src/components/sideNav/index.tsx",[],"/Users/imform/Documents/Flow/src/components/contentChart/index.tsx",[],"/Users/imform/Documents/Flow/src/components/contentTicket/index.tsx",["112","113","114"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Comment, Avatar, Form, Button, List, Input, Radio, Divider } from 'antd';\nimport { CommentProps } from 'antd/lib/comment';\nimport { faUserCircle, faThumbtack, faHistory, faUserFriends, faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useDispatch } from 'react-redux';\nimport { like, changeStatus } from 'store';\nimport { RadioChangeEvent } from 'antd/lib/radio';\n\nconst { TextArea } = Input;\n\nconst ContentBox = styled.div`\n  width: 95%;\n  padding: 20px;\n  box-sizing: border-box;\n  border-radius: 10px;\n  background: #fff;\n  margin-top: 5px;\n`;\n\nconst FontAwesomeIconStyle = styled(FontAwesomeIcon)`\n  margin-right: 15px;\n`;\nconst MakeTicket = styled.div`\n  display: grid;\n  grid-template-columns: 10% 87% 3%;\n  > div:nth-child(1) {\n    font-size: 2rem;\n    vertical-align: middle;\n  }\n  div:nth-child(2) {\n    padding: 5px 0;\n  }\n\n  p {\n    margin: 0;\n  }\n`;\n\nconst TitleArea = styled.div`\n  display: flex;\n  justify-content: space-between;\n  h2 {\n    display: inline-block;\n  }\n`;\n\nconst CommonStyle = styled.div``;\n\nconst Line = styled(Divider)`\n  margin: 15px 0;\n`;\ninterface commentProps {\n  comments: any;\n}\n\nconst CommentList = ({ comments }: commentProps) => (\n  <List\n    dataSource={comments}\n    header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\n    itemLayout=\"horizontal\"\n    renderItem={(props: CommentProps) => <Comment {...props} />}\n  />\n);\n\ninterface editorProps {\n  onChange: any;\n  onSubmit: any;\n  submitting: any;\n  value: any;\n}\nconst Editor = ({ onChange, onSubmit, submitting, value }: editorProps) => (\n  <>\n    <Form.Item>\n      <TextArea rows={4} onChange={onChange} value={value} />\n    </Form.Item>\n    <Form.Item>\n      <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\n        Add Comment\n      </Button>\n    </Form.Item>\n  </>\n);\n\ninterface commentState {\n  comments: Array<{}>;\n  submitting: boolean;\n  value: string;\n}\n\ninterface progressState {\n  type: string;\n  count: number;\n}\ninterface ContentTicketProps {\n  ticket: any;\n  checkPin: () => void;\n}\n\nexport const ContentTicket = ({ ticket, checkPin }: ContentTicketProps) => {\n  const [value, setValue] = useState('request');\n  const ticketContent = ticket;\n  const [comment, setComment] = useState<commentState>({\n    comments: [],\n    submitting: false,\n    value: '',\n  });\n  const dispatch = useDispatch();\n\n  const handleSubmit = () => {\n    if (!comment.value) {\n      return;\n    }\n\n    setComment({\n      ...comment,\n      submitting: true,\n    });\n\n    setTimeout(() => {\n      setComment({\n        submitting: false,\n        value: '',\n        comments: [\n          {\n            author: 'Han Solo',\n            avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n            content: <p>{comment.value}</p>,\n            // datetime: moment().fromNow(),\n          },\n          ...comment.comments,\n        ],\n      });\n    }, 1000);\n  };\n\n  const handleChange = (e: any) => {\n    setComment({\n      ...comment,\n      value: e.target.value,\n    });\n  };\n\n  const likeContent = (id: number) => {\n    dispatch(\n      like({\n        id: id,\n        like: 1,\n      })\n    );\n  };\n\n  const onChange = (id: number, value: RadioChangeEvent) => {\n    console.log(value.target.value);\n    dispatch(\n      changeStatus({\n        id: id,\n        value: value.target.value,\n      })\n    );\n  };\n  console.log(ticketContent.title !== '');\n  return (\n    <>\n      {ticketContent.title !== '' && (\n        <ContentBox>\n          <MakeTicket>\n            <div>\n              <FontAwesomeIcon icon={faUserCircle}></FontAwesomeIcon>\n            </div>\n            <div>\n              <p>관리자 1</p>\n              <p>2021-01-08 10:27</p>\n            </div>\n            <FontAwesomeIcon icon={faThumbtack} onClick={checkPin}></FontAwesomeIcon>\n          </MakeTicket>\n          <TitleArea>\n            <h2>{ticketContent.title}</h2>\n            {ticketContent.id !== 0 && <span>업무번호{ticketContent.id}</span>}\n          </TitleArea>\n          {ticketContent.status && (\n            <>\n              <Line />\n              <div>\n                <FontAwesomeIconStyle icon={faHistory}></FontAwesomeIconStyle>\n                <Radio.Group\n                  name=\"progress\"\n                  buttonStyle=\"solid\"\n                  onChange={(value: RadioChangeEvent) => onChange(ticketContent.id, value)}\n                  value={ticketContent.status}\n                >\n                  <Radio.Button value={'request'}>요청</Radio.Button>\n                  <Radio.Button value={'progress'}>진행</Radio.Button>\n                  <Radio.Button value={'feedback'}>피드백</Radio.Button>\n                  <Radio.Button value={'completion'}>완료</Radio.Button>\n                  <Radio.Button value={'pending'}>보류</Radio.Button>\n                </Radio.Group>\n              </div>\n            </>\n          )}\n          <CommonStyle>\n            {ticketContent.managers && (\n              <>\n                <Line />\n                <FontAwesomeIconStyle icon={faUserFriends}></FontAwesomeIconStyle>\n                {ticketContent.managers.map((manager: string) => {\n                  return <span>{manager}</span>;\n                })}\n              </>\n            )}\n          </CommonStyle>\n          {ticketContent.content && (\n            <>\n              <Line />\n              <div>\n                {ticketContent.content.split('\\n').map((line: any) => {\n                  return (\n                    <span>\n                      {line}\n                      <br />\n                    </span>\n                  );\n                })}\n              </div>\n            </>\n          )}\n          <Line />\n          <CommonStyle>\n            <FontAwesomeIconStyle onClick={() => likeContent(ticketContent.id)} icon={faHeart}></FontAwesomeIconStyle>\n            {ticketContent.like && <span>{ticketContent.like}</span>}\n          </CommonStyle>\n          <Line />\n          <>\n            {comment.comments.length > 0 && <CommentList comments={comment.comments} />}\n            <Comment\n              avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" alt=\"Han Solo\" />}\n              content={\n                <Editor\n                  onChange={handleChange}\n                  onSubmit={handleSubmit}\n                  submitting={comment.submitting}\n                  value={comment.value}\n                />\n              }\n            />\n          </>\n        </ContentBox>\n      )}\n    </>\n  );\n};\n","/Users/imform/Documents/Flow/src/components/mainBox/index.tsx",["115","116"],"import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectMenu, selectProjects } from 'store';\nimport { Link } from 'react-router-dom';\n\nimport { Modal } from 'antd';\n\n// interface favoritesProps {\n//   favorites: boolean;\n//   setFavorites: Dispatch<SetStateAction<boolean>>;\n// }\n\ninterface removeProjectProps {\n  removeProject: (e: any) => void;\n  checkFavorit: (e: any) => void;\n}\ninterface projectItem {\n  id: number;\n  title: string;\n  people: number;\n}\n\nconst ItemStyle = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 20px 20px;\n  box-sizing: border-box;\n`;\nconst ItemBoxStyle = styled.div`\n  margin-right: 15px;\n  width: 200px;\n  height: 200px;\n  border-radius: 10px;\n  padding: 15px;\n  box-sizing: border-box;\n  background: ${(props) => props.color};\n  font-size: 16px;\n`;\n\nconst FavoritesProjectStyle = styled(FontAwesomeIcon)`\n  color: block;\n  margin-right: 10px;\n`;\n\nexport const MainBox = ({ removeProject, checkFavorit }: removeProjectProps) => {\n  const itemBoxWrapper = useRef<any>();\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [thisProject, setThisProject] = useState<any>();\n\n  const removeRef = useRef<any>();\n\n  const color = [\n    'mistyrose',\n    'skyblue',\n    'gold',\n    'tomato',\n    'coral',\n    'gray',\n    'aquamarine',\n    'thistle',\n    'lightblue',\n    'cornflowerblue',\n  ];\n\n  const productList = useSelector(selectProjects);\n  const menu = useSelector(selectMenu);\n\n  const showModal = (e: any) => {\n    setIsModalVisible(true);\n    setThisProject(e);\n  };\n\n  const removeCancel = () => {\n    removeProject(thisProject);\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  console.log(removeRef);\n  return (\n    <ItemStyle>\n      {menu === 'all' ? (\n        <>\n          {productList &&\n            productList.map((items: any, index: any) => {\n              console.log(items.favorites);\n              return (\n                <ItemBoxStyle\n                  key={items.id}\n                  color={color[Math.floor(Math.random() * 10)]}\n                  ref={itemBoxWrapper}\n                  data-id={items.id}\n                >\n                  <p style={{ textAlign: 'right', lineHeight: '16px' }} onClick={(e) => showModal(e)} ref={removeRef}>\n                    X\n                  </p>\n                  <Modal\n                    title=\"프로젝트를 삭제 하시겠습니까?\"\n                    visible={isModalVisible}\n                    onOk={removeCancel}\n                    onCancel={handleCancel}\n                  ></Modal>\n                  <Link to={`${items.id}`}>\n                    <h3>{items.title}</h3>\n                  </Link>\n                  <p>{items.people.length}명 참여중</p>\n                  <FavoritesProjectStyle\n                    style={{\n                      color: items.favorites === true ? 'yellow' : 'black',\n                    }}\n                    className=\"favorites-project\"\n                    icon={faStar}\n                    onClick={(e) => checkFavorit(e)}\n                  ></FavoritesProjectStyle>\n                </ItemBoxStyle>\n              );\n            })}\n        </>\n      ) : (\n        productList\n          .filter((item: any) => {\n            return item.favorites;\n          })\n          .map((items: any, index: any) => {\n            return (\n              <ItemBoxStyle\n                key={items.id}\n                color={color[Math.floor(Math.random() * 10)]}\n                ref={itemBoxWrapper}\n                data-id={items.id}\n              >\n                <p style={{ textAlign: 'right', lineHeight: '16px' }} onClick={(e) => showModal(e)} ref={removeRef}>\n                  X\n                </p>\n                <Modal\n                  title=\"프로젝트를 삭제 하시겠습니까?\"\n                  visible={isModalVisible}\n                  onOk={removeCancel}\n                  onCancel={handleCancel}\n                ></Modal>\n                <Link to={`${items.id}`}>\n                  <h3>{items.title}</h3>\n                </Link>\n                <p>{items.people.length}명 참여중</p>\n                <FavoritesProjectStyle\n                  style={{\n                    color: items.favorites === true ? 'yellow' : 'black',\n                  }}\n                  className=\"favorites-project\"\n                  icon={faStar}\n                  onClick={(e) => checkFavorit(e)}\n                ></FavoritesProjectStyle>\n              </ItemBoxStyle>\n            );\n          })\n      )}\n    </ItemStyle>\n  );\n};\n","/Users/imform/Documents/Flow/src/components/contentAside/index.tsx",[],"/Users/imform/Documents/Flow/src/components/contentWrite/index.tsx",[],"/Users/imform/Documents/Flow/src/store/store.ts",[],"/Users/imform/Documents/Flow/src/store/write.ts",[],"/Users/imform/Documents/Flow/src/store/menu.ts",["117"],"import { createSlice } from '@reduxjs/toolkit';\n\nconst menuSlice = createSlice({\n  name: 'menu',\n  initialState: {\n    onMenu: 'all',\n  },\n  reducers: {\n    menuChange: (state, action) => {\n      state.onMenu = action.payload;\n    },\n  },\n});\n\nexport const { menuChange } = menuSlice.actions;\nexport const selectMenu = (state: any) => state.menu.onMenu;\n\nexport default menuSlice.reducer;\n","/Users/imform/Documents/Flow/src/store/project.ts",[],"/Users/imform/Documents/Flow/src/components/contentChart/utils.ts",["118","119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":92,"column":11,"nodeType":"127","messageId":"128","endLine":92,"endColumn":24},{"ruleId":"125","severity":1,"message":"129","line":103,"column":10,"nodeType":"127","messageId":"128","endLine":103,"endColumn":15},{"ruleId":"125","severity":1,"message":"130","line":103,"column":17,"nodeType":"127","messageId":"128","endLine":103,"endColumn":25},{"ruleId":"125","severity":1,"message":"131","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":21},{"ruleId":"125","severity":1,"message":"132","line":20,"column":11,"nodeType":"127","messageId":"128","endLine":20,"endColumn":22},{"ruleId":"125","severity":1,"message":"133","line":1,"column":23,"nodeType":"127","messageId":"128","endLine":1,"endColumn":37},{"ruleId":"125","severity":1,"message":"134","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"135","line":39,"column":13,"nodeType":"127","messageId":"128","endLine":39,"endColumn":23},{"ruleId":"125","severity":1,"message":"136","line":126,"column":7,"nodeType":"127","messageId":"128","endLine":126,"endColumn":14},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'progressState' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'useDispatch' is defined but never used.","'projectItem' is defined but never used.","'configureStore' is defined but never used.","'React' is defined but never used.","'configType' is defined but never used.","'myChart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]