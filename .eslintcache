[{"/Users/imform/Documents/Flow/src/index.tsx":"1","/Users/imform/Documents/Flow/src/App.tsx":"2","/Users/imform/Documents/Flow/src/store/index.ts":"3","/Users/imform/Documents/Flow/src/pages/index.ts":"4","/Users/imform/Documents/Flow/src/routes/index.ts":"5","/Users/imform/Documents/Flow/src/routes/const.ts":"6","/Users/imform/Documents/Flow/src/pages/content/index.tsx":"7","/Users/imform/Documents/Flow/src/pages/main/index.tsx":"8","/Users/imform/Documents/Flow/src/layouts/index.tsx":"9","/Users/imform/Documents/Flow/src/containers/index.tsx":"10","/Users/imform/Documents/Flow/src/containers/mainContainer/index.tsx":"11","/Users/imform/Documents/Flow/src/layouts/mainLayout/index.tsx":"12","/Users/imform/Documents/Flow/src/containers/contentContainer/index.tsx":"13","/Users/imform/Documents/Flow/src/modules/project/favoriteProject.ts":"14","/Users/imform/Documents/Flow/src/components/index.ts":"15","/Users/imform/Documents/Flow/src/components/sideNav/index.tsx":"16","/Users/imform/Documents/Flow/src/components/contentChart/index.tsx":"17","/Users/imform/Documents/Flow/src/components/contentTicket/index.tsx":"18","/Users/imform/Documents/Flow/src/components/mainBox/index.tsx":"19","/Users/imform/Documents/Flow/src/components/contentAside/index.tsx":"20","/Users/imform/Documents/Flow/src/components/contentWrite/index.tsx":"21","/Users/imform/Documents/Flow/src/store/store.ts":"22","/Users/imform/Documents/Flow/src/store/write.ts":"23","/Users/imform/Documents/Flow/src/store/menu.ts":"24","/Users/imform/Documents/Flow/src/store/project.ts":"25","/Users/imform/Documents/Flow/src/components/contentChart/utils.ts":"26"},{"size":341,"mtime":1610425859672,"results":"27","hashOfConfig":"28"},{"size":554,"mtime":1610350714825,"results":"29","hashOfConfig":"28"},{"size":76,"mtime":1610441789169,"results":"30","hashOfConfig":"28"},{"size":98,"mtime":1610332609161,"results":"31","hashOfConfig":"28"},{"size":460,"mtime":1610335222777,"results":"32","hashOfConfig":"28"},{"size":69,"mtime":1610323738886,"results":"33","hashOfConfig":"28"},{"size":243,"mtime":1610335222774,"results":"34","hashOfConfig":"28"},{"size":273,"mtime":1610332609163,"results":"35","hashOfConfig":"28"},{"size":54,"mtime":1610332609159,"results":"36","hashOfConfig":"28"},{"size":126,"mtime":1610332609155,"results":"37","hashOfConfig":"28"},{"size":900,"mtime":1610505719325,"results":"38","hashOfConfig":"28"},{"size":2957,"mtime":1610530570375,"results":"39","hashOfConfig":"28"},{"size":6081,"mtime":1610530534633,"results":"40","hashOfConfig":"28"},{"size":466,"mtime":1610531604651,"results":"41","hashOfConfig":"28"},{"size":151,"mtime":1610350714837,"results":"42","hashOfConfig":"28"},{"size":4357,"mtime":1610525754782,"results":"43","hashOfConfig":"28"},{"size":1074,"mtime":1610525754777,"results":"44","hashOfConfig":"28"},{"size":7819,"mtime":1610530511201,"results":"45","hashOfConfig":"28"},{"size":4471,"mtime":1610505719318,"results":"46","hashOfConfig":"28"},{"size":3479,"mtime":1610527205621,"results":"47","hashOfConfig":"28"},{"size":5487,"mtime":1610525754781,"results":"48","hashOfConfig":"28"},{"size":310,"mtime":1610441789171,"results":"49","hashOfConfig":"28"},{"size":1353,"mtime":1610525754794,"results":"50","hashOfConfig":"28"},{"size":389,"mtime":1610441789170,"results":"51","hashOfConfig":"28"},{"size":2106,"mtime":1610505719327,"results":"52","hashOfConfig":"28"},{"size":4089,"mtime":1610525754779,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"142ibnu",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},"/Users/imform/Documents/Flow/src/index.tsx",[],["110","111"],"/Users/imform/Documents/Flow/src/App.tsx",[],"/Users/imform/Documents/Flow/src/store/index.ts",[],"/Users/imform/Documents/Flow/src/pages/index.ts",[],"/Users/imform/Documents/Flow/src/routes/index.ts",[],"/Users/imform/Documents/Flow/src/routes/const.ts",[],"/Users/imform/Documents/Flow/src/pages/content/index.tsx",[],"/Users/imform/Documents/Flow/src/pages/main/index.tsx",[],"/Users/imform/Documents/Flow/src/layouts/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/mainContainer/index.tsx",[],"/Users/imform/Documents/Flow/src/layouts/mainLayout/index.tsx",[],"/Users/imform/Documents/Flow/src/containers/contentContainer/index.tsx",[],"/Users/imform/Documents/Flow/src/modules/project/favoriteProject.ts",[],"/Users/imform/Documents/Flow/src/components/index.ts",[],"/Users/imform/Documents/Flow/src/components/sideNav/index.tsx",[],"/Users/imform/Documents/Flow/src/components/contentChart/index.tsx",[],"/Users/imform/Documents/Flow/src/components/contentTicket/index.tsx",[],"/Users/imform/Documents/Flow/src/components/mainBox/index.tsx",["112","113"],"import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectMenu, selectProjects } from 'store';\nimport { Link } from 'react-router-dom';\n\nimport { Modal } from 'antd';\n\n// interface favoritesProps {\n//   favorites: boolean;\n//   setFavorites: Dispatch<SetStateAction<boolean>>;\n// }\n\ninterface removeProjectProps {\n  removeProject: (e: any) => void;\n  checkFavorit: (e: any) => void;\n}\ninterface projectItem {\n  id: number;\n  title: string;\n  people: number;\n}\n\nconst ItemStyle = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 20px 20px;\n  box-sizing: border-box;\n`;\nconst ItemBoxStyle = styled.div`\n  margin-right: 15px;\n  width: 200px;\n  height: 200px;\n  border-radius: 10px;\n  padding: 15px;\n  box-sizing: border-box;\n  background: ${(props) => props.color};\n  font-size: 16px;\n`;\n\nconst FavoritesProjectStyle = styled(FontAwesomeIcon)`\n  color: block;\n  margin-right: 10px;\n`;\n\nexport const MainBox = ({ removeProject, checkFavorit }: removeProjectProps) => {\n  const itemBoxWrapper = useRef<any>();\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [thisProject, setThisProject] = useState<any>();\n\n  const removeRef = useRef<any>();\n\n  const color = [\n    'mistyrose',\n    'skyblue',\n    'gold',\n    'tomato',\n    'coral',\n    'gray',\n    'aquamarine',\n    'thistle',\n    'lightblue',\n    'cornflowerblue',\n  ];\n\n  const productList = useSelector(selectProjects);\n  const menu = useSelector(selectMenu);\n\n  const showModal = (e: any) => {\n    setIsModalVisible(true);\n    setThisProject(e);\n  };\n\n  const removeCancel = () => {\n    removeProject(thisProject);\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  console.log(removeRef);\n  return (\n    <ItemStyle>\n      {menu === 'all' ? (\n        <>\n          {productList &&\n            productList.map((items: any, index: any) => {\n              console.log(items.favorites);\n              return (\n                <ItemBoxStyle\n                  key={items.id}\n                  color={color[Math.floor(Math.random() * 10)]}\n                  ref={itemBoxWrapper}\n                  data-id={items.id}\n                >\n                  <p style={{ textAlign: 'right', lineHeight: '16px' }} onClick={(e) => showModal(e)} ref={removeRef}>\n                    X\n                  </p>\n                  <Modal\n                    title=\"프로젝트를 삭제 하시겠습니까?\"\n                    visible={isModalVisible}\n                    onOk={removeCancel}\n                    onCancel={handleCancel}\n                  ></Modal>\n                  <Link to={`${items.id}`}>\n                    <h3>{items.title}</h3>\n                  </Link>\n                  <p>{items.people.length}명 참여중</p>\n                  <FavoritesProjectStyle\n                    style={{\n                      color: items.favorites === true ? 'yellow' : 'black',\n                    }}\n                    className=\"favorites-project\"\n                    icon={faStar}\n                    onClick={(e) => checkFavorit(e)}\n                  ></FavoritesProjectStyle>\n                </ItemBoxStyle>\n              );\n            })}\n        </>\n      ) : (\n        productList\n          .filter((item: any) => {\n            return item.favorites;\n          })\n          .map((items: any, index: any) => {\n            return (\n              <ItemBoxStyle\n                key={items.id}\n                color={color[Math.floor(Math.random() * 10)]}\n                ref={itemBoxWrapper}\n                data-id={items.id}\n              >\n                <p style={{ textAlign: 'right', lineHeight: '16px' }} onClick={(e) => showModal(e)} ref={removeRef}>\n                  X\n                </p>\n                <Modal\n                  title=\"프로젝트를 삭제 하시겠습니까?\"\n                  visible={isModalVisible}\n                  onOk={removeCancel}\n                  onCancel={handleCancel}\n                ></Modal>\n                <Link to={`${items.id}`}>\n                  <h3>{items.title}</h3>\n                </Link>\n                <p>{items.people.length}명 참여중</p>\n                <FavoritesProjectStyle\n                  style={{\n                    color: items.favorites === true ? 'yellow' : 'black',\n                  }}\n                  className=\"favorites-project\"\n                  icon={faStar}\n                  onClick={(e) => checkFavorit(e)}\n                ></FavoritesProjectStyle>\n              </ItemBoxStyle>\n            );\n          })\n      )}\n    </ItemStyle>\n  );\n};\n","/Users/imform/Documents/Flow/src/components/contentAside/index.tsx",["114","115"],"/Users/imform/Documents/Flow/src/components/contentWrite/index.tsx",[],"/Users/imform/Documents/Flow/src/store/store.ts",[],"/Users/imform/Documents/Flow/src/store/write.ts",[],"/Users/imform/Documents/Flow/src/store/menu.ts",["116"],"import { createSlice } from '@reduxjs/toolkit';\n\nconst menuSlice = createSlice({\n  name: 'menu',\n  initialState: {\n    onMenu: 'all',\n  },\n  reducers: {\n    menuChange: (state, action) => {\n      state.onMenu = action.payload;\n    },\n  },\n});\n\nexport const { menuChange } = menuSlice.actions;\nexport const selectMenu = (state: any) => state.menu.onMenu;\n\nexport default menuSlice.reducer;\n","/Users/imform/Documents/Flow/src/store/project.ts",[],"/Users/imform/Documents/Flow/src/components/contentChart/utils.ts",["117","118","119"],"import React, { useState } from 'react';\nimport Chart from 'chart.js';\ninterface progressProps {\n  list?: number[];\n}\nexport const chart = (list: number[]) => {\n  console.log(list);\n  let _list = [...list];\n  let total: number = _list?.reduce((a, c) => a + c);\n  console.log(total);\n  // export const chart = () => {\n  Chart.pluginService.register({\n    beforeDraw: function (chart: any) {\n      if (chart.config.options.elements.center) {\n        let ctx = chart.chart.ctx;\n\n        let centerConfig = chart.config.options.elements.center;\n        let fontStyle = centerConfig.fontStyle || 'Arial';\n        let txt = centerConfig.text;\n        let color = centerConfig.color || '#000';\n        let sidePadding = centerConfig.sidePadding || 20;\n        let sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2);\n        ctx.font = '30px ' + fontStyle;\n\n        let stringWidth = ctx.measureText(txt).width;\n        let elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\n\n        let widthRatio = elementWidth / stringWidth;\n        let newFontSize = Math.floor(30 * widthRatio);\n        let elementHeight = chart.innerRadius * 2;\n\n        let fontSizeToUse = Math.min(newFontSize, elementHeight);\n\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        let centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n        let centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n        ctx.font = fontSizeToUse + 'px ' + fontStyle;\n        ctx.fillStyle = color;\n\n        ctx.fillText(txt, centerX, centerY);\n      }\n    },\n  });\n\n  // interface configType {\n  //   type: string;\n  //   data: {\n  //     labels: string[];\n  //     datasets: {\n  //       data: number[];\n  //       backgroundColor: string[];\n  //       hoverBackgroundColor: string[];\n  //     }[];\n  //   };\n  //   options: {\n  //     elements: {\n  //       center: {\n  //         text: string;\n  //         color: string;\n  //         fontStyle: string;\n  //         sidePadding: number;\n  //       };\n  //     };\n  //   };\n  // }\n\n  let config: any = {\n    type: 'doughnut',\n    data: {\n      labels: ['요청', '진행', '피드백', '완료', '보류'],\n      datasets: [\n        {\n          data: list,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.5)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(123, 192, 192, 0.2)',\n          ],\n          hoverBackgroundColor: [\n            'rgba(255, 99, 132, 0.5)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(123, 192, 192, 0.2)',\n          ],\n        },\n      ],\n    },\n    options: {\n      elements: {\n        center: {\n          text: `업무리포트 ${total}건`,\n          color: '#000', // Default is #000000\n          fontStyle: 'Arial', // Default is Arial\n          sidePadding: 20, // Defualt is 20 (as a percentage)\n        },\n      },\n    },\n    legend: {\n      position: 'bottom',\n      display: false,\n    },\n    legendCallback: function (chart: any) {\n      const renderLabels = (chart: any) => {\n        const { data } = chart;\n        return data.datasets[0].data\n          .map(\n            (_: any, i: number) =>\n              `<li>\n                  <div id=\"legend-${i}-item\" class=\"legend-item\">\n                    <span style=\"background-color:\n                      ${data.datasets[0].backgroundColor[i]}\">\n                      &nbsp;&nbsp;&nbsp;&nbsp;\n                    </span>\n                    ${data.labels[i] && `<span class=\"label\">${data.labels[i]}: $${data.datasets[0].data[i]}</span>`}\n                  </div>\n              </li>\n            `\n          )\n          .join('');\n      };\n      return `\n        <ul class=\"chartjs-legend\">\n          ${renderLabels(chart)}\n        </ul>`;\n    },\n  };\n  let aa = document.getElementById('myChart') as HTMLCanvasElement;\n  let ctx = aa.getContext('2d') as CanvasRenderingContext2D;\n  let myChart = new Chart(ctx, config);\n};\n",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":5,"column":10,"nodeType":"126","messageId":"127","endLine":5,"endColumn":21},{"ruleId":"124","severity":1,"message":"128","line":20,"column":11,"nodeType":"126","messageId":"127","endLine":20,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":93,"column":108,"nodeType":"131","messageId":"132","endLine":93,"endColumn":110},{"ruleId":"129","severity":1,"message":"130","line":109,"column":108,"nodeType":"131","messageId":"132","endLine":109,"endColumn":110},{"ruleId":"124","severity":1,"message":"133","line":1,"column":23,"nodeType":"126","messageId":"127","endLine":1,"endColumn":37},{"ruleId":"124","severity":1,"message":"134","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":13},{"ruleId":"124","severity":1,"message":"135","line":39,"column":13,"nodeType":"126","messageId":"127","endLine":39,"endColumn":23},{"ruleId":"124","severity":1,"message":"136","line":126,"column":7,"nodeType":"126","messageId":"127","endLine":126,"endColumn":14},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'projectItem' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'configureStore' is defined but never used.","'React' is defined but never used.","'configType' is defined but never used.","'myChart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]